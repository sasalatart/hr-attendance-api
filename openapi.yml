openapi: 3.0.0
info:
  description: |
    This is the HR Management API for the Runa HR assignment.

    A client app may be found in [https://hr-attendance.netlify.com/](https://hr-attendance.netlify.com/).
  version: "1.0.0"
  title: HR Attendance
  contact:
    email: sa.salatart@gmail.com
servers:
  # Added by API Auto Mocking Plugin
  - url: "https://hr-api.salatart.com"
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/sasalatart/hr-attendance/1.0.0
tags:
  - name: Sessions
    description: Login logic
  - name: Organizations
    description: Organizations logic
  - name: Users
    description: Users logic
  - name: Attendances
    description: Attendances logic
paths:
  /user_token:
    post:
      tags:
        - Sessions
      summary: Retrieve a short-lived JWT from the submitted credentials.
      requestBody:
        $ref: "#/components/requestBodies/Auth"
      responses:
        "201":
          description: Successful login.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Auth"
        "401":
          description: Invalid credentials.

  /organizations:
    get:
      tags:
        - Organizations
      summary: Fetch all organizations registered in the platform, paginated.
      description: Intended only for admins.
      responses:
        "200":
          description: Successful operation
          headers:
            x-page:
              $ref: "#/components/headers/x-page"
            x-per-page:
              $ref: "#/components/headers/x-per-page"
            x-total:
              $ref: "#/components/headers/x-total"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Organization"
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an admin.
    post:
      tags:
        - Organizations
      summary: Create an organization.
      description: Intended only for admins.
      requestBody:
        $ref: "#/components/requestBodies/Organization"
      responses:
        "201":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "401":
          description: Invalid Bearer token
        "403":
          description: The requester was not an admin
        "422":
          description: Validation errors.
  /organizations/{id}:
    get:
      tags:
        - Organizations
      summary: Fetch an organization.
      description: Intended only for admins or members of the specified organization.
      parameters:
        - name: id
          in: path
          description: ID of the requested organization.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was neither an admin, nor a member of the requested organization.
    put:
      tags:
        - Organizations
      summary: Update an organization
      description: Intended only for admins.
      parameters:
        - name: id
          in: path
          description: ID of the organization to update.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: "#/components/requestBodies/Organization"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an admin.
        "404":
          description: The organization to update was not found.
        "422":
          description: Validation errors.
    delete:
      tags:
        - Organizations
      summary: Destroy an organization.
      description: Intended only for admins.
      parameters:
        - name: id
          in: path
          description: ID of the organization to destroy.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Successful operation.
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an admin.
        "404":
          description: The organization to update was not found.

  /users/me:
    get:
      tags:
        - Users
      summary: Fetch the user corresponding to the given JWT.
      description: Available to any authenticated user, regardless of their role.
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Invalid Bearer token
  /users/{id}:
    get:
      tags:
        - Users
      summary: Fetch a user.
      description: Intended only for organization admins belonging to the same organization as the user to be fetched.
      parameters:
        - name: id
          in: path
          description: ID of the user to fetch.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an organization admin from the user's organization.
        "404":
          description: The user to fetch was not found.
    put:
      tags:
        - Users
      summary: Update a user.
      description: Intended only for organization admins belonging to the same organization as the user to be updated.
      parameters:
        - name: id
          in: path
          description: ID of the user to update.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: "#/components/requestBodies/UpdateUser"
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an organization admin from the user's organization.
        "404":
          description: The user to update was not found.
    delete:
      tags:
        - Users
      summary: Destroy a user.
      description: Intended only for organization admins belonging to the same organization as the user to be destroyed.
      parameters:
        - name: id
          in: path
          description: ID of the user to destroy
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Successful operation.
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an organization admin from the user's organization.
        "404":
          description: The user to destroy was not found.
  /organizations/{organization_id}/users:
    get:
      tags:
        - Users
      summary: Fetch all users, filtered by role, from the specified organization, paginated.
      description: Intended only for organization admins belonging to the same organization as the requested one.
      parameters:
        - name: organization_id
          in: path
          description: ID of the organization whose users need to be fetched.
          required: true
          schema:
            type: string
            format: uuid
        - name: role
          in: query
          description: Role with which to filter users from the organization.
          required: true
          schema:
            type: string
            enum: [org_admin, employee]
        - name: page
          in: query
          description: Pagination page to query.
          schema:
            type: number
      responses:
        "200":
          description: Successful operation.
          headers:
            x-page:
              $ref: "#/components/headers/x-page"
            x-per-page:
              $ref: "#/components/headers/x-per-page"
            x-total:
              $ref: "#/components/headers/x-total"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an organization admin from the specified organization.
        "404":
          description: The specified organization was not found.
    post:
      tags:
        - Users
      summary: Create a user within the specified organization.
      description: Intended only for organization admins belonging to the same organization as the specified one.
      parameters:
        - name: organization_id
          in: path
          description: ID of the organization where the user will be created.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: "#/components/requestBodies/CreateUser"
      responses:
        "201":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Invalid Bearer token
        "403":
          description: The requester was not an organization admin from the specified organization.
        "404":
          description: The specified organization was not found.
        "422":
          description: Validation error

  /attendances/check-ins:
    post:
      tags:
        - Attendances
      summary: Checks in the requesting user.
      description: Intended only for employees. An attendance instance is created, with an "entered_at" value corresponding to the request timestamp, and a timezone corresponding to the user's current timezone.
      responses:
        "201":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attendance"
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an employee.
        "422":
          description: Validation error. For example, the user already checked in, but has not checked out from the previous check in.
  /attendances/check-outs:
    put:
      tags:
        - Attendances
      summary: Checks out the requesting user.
      description: Intended only for employees.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attendance"
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an employee.
        "422":
          description: Validation error. For example, the user already checked out from the only remaining attendance which had not been checked out yet.
  /organizations/{id}/attendances:
    get:
      tags:
        - Attendances
      summary: Fetch all attendances from an organization, paginated.
      description: Intended only for organization admins belonging to the same organization as the specified one.
      parameters:
        - name: id
          in: path
          description: ID of the organization whose attendances need to be fetched.
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Pagination page to query.
          schema:
            type: number
      responses:
        "200":
          description: Successful operation
          headers:
            x-page:
              $ref: "#/components/headers/x-page"
            x-per-page:
              $ref: "#/components/headers/x-per-page"
            x-total:
              $ref: "#/components/headers/x-total"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Attendance"
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an organization admin from the specified organization.
        "404":
          description: The specified organization was not found.
  /employees/{id}/attendances:
    get:
      tags:
        - Attendances
      summary: Get all attendances from an employee, paginated.
      description: Intended only for organization admins, or the employee owning those attendances.
      parameters:
        - name: id
          in: path
          description: ID of the employee whose attendances need to be fetched.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation
          headers:
            x-page:
              $ref: "#/components/headers/x-page"
            x-per-page:
              $ref: "#/components/headers/x-per-page"
            x-total:
              $ref: "#/components/headers/x-total"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Attendance"
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was neither the employee owning the attendances, nor an organization admin from the same organization.
        "404":
          description: The specified employee was not found.
    post:
      tags:
        - Attendances
      summary: Create an attendance for the specified employee.
      description: Intended only for organization admins belonging to the same organization as the specified employee.
      parameters:
        - name: id
          in: path
          description: ID of the employee to whom an attendance will be created.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: "#/components/requestBodies/Attendance"
      responses:
        "201":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attendance"
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an organization admin from the employee's organization.
        "404":
          description: The specified employee was not found.
        "422":
          description: Validation errors.
  /attendances/{id}:
    put:
      tags:
        - Attendances
      summary: Update an attendance.
      description: Intended only for organization admins belonging to the same organization as the specified attendance.
      parameters:
        - name: id
          in: path
          description: ID of the attendance to update.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: "#/components/requestBodies/Attendance"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attendance"
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an organization admin from the attendance's organization.
        "404":
          description: The specified attendance was not found.
        "422":
          description: Validation errors.
    delete:
      tags:
        - Attendances
      summary: Destroy an attendance.
      description: Intended only for organization admins belonging to the same organization as the specified attendance.
      parameters:
        - name: id
          in: path
          description: ID of the attendance to destroy.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Successful operation.
        "401":
          description: Invalid Bearer token.
        "403":
          description: The requester was not an organization admin from the attendance's organization.
        "404":
          description: The specified attendance was not found.

components:
  schemas:
    Auth:
      type: object
      properties:
        jwt:
          type: string
    Organization:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Runa HR"
        updated_at:
          type: string
          format: datetime
        created_at:
          type: string
          format: datetime
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        role:
          type: string
          enum: [admin, org_admin, employee]
        organization_id:
          type: string
          format: uuid
          description: The organization to which the user belongs.
        email:
          type: string
          format: email
        name:
          type: string
          example: Sebastián
        surname:
          type: string
          example: Salata
        second_surname:
          type: string
          example: Ruiz-Tagle
        last_attendance:
          $ref: "#/components/schemas/Attendance"
        timezone:
          type: string
          example: "America/Santiago"
        updated_at:
          type: string
          format: datetime
        created_at:
          type: string
          format: datetime
    Attendance:
      type: object
      properties:
        id:
          type: string
          format: uuid
        employee_id:
          type: string
          format: uuid
          description: The employee who owns this attendance.
        employee_fullname:
          type: string
          description: Name, surname and second surname of the employee who owns this attendance.
          example: Sebastián Salata Ruiz-Tagle
        entered_at:
          type: string
          format: datetime
        left_at:
          type: string
          format: datetime
        timezone:
          type: string
          example: "America/Santiago"
        updated_at:
          type: string
          format: datetime
        created_at:
          type: string
          format: datetime
  requestBodies:
    Auth:
      content:
        application/json:
          schema:
            type: object
            properties:
              auth:
                type: object
                properties:
                  email:
                    type: string
                  password:
                    type: string
    Organization:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Runa HR"
            required:
              - name
    CreateUser:
      content:
        application/json:
          schema:
            type: object
            properties:
              role:
                type: string
              email:
                type: string
                format: email
              name:
                type: string
              surname:
                type: string
              second_surname:
                type: string
              timezone:
                type: string
                description: The timezone that best reflects the current geographical position of the user to be created.
                example: "America/Santiago"
              password:
                type: string
              password_confirmation:
                type: string
                description: The confirmation of the password (same text).
            required:
              - email
              - name
              - surname
              - timezone
              - password
              - password_confirmation
    UpdateUser:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
              name:
                type: string
              surname:
                type: string
              second_surname:
                type: string
              timezone:
                type: string
                description: The timezone that best reflects the current geographical position of the user to be updated.
                example: "America/Santiago"
              password:
                type: string
                description: The new password, if it needs to be updated.
              password_confirmation:
                type: string
                description: The confirmation of the password (same text).
    Attendance:
      content:
        application/json:
          schema:
            type: object
            properties:
              entered_at:
                type: string
                format: datetime
              left_at:
                type: string
                format: datetime
              timezone:
                type: string
                example: "America/Santiago"
  headers:
    x-page:
      description: The page number corresponding to the paginated response.
      schema:
        type: integer
        example: 1
    x-per-page:
      description: Number of records per page.
      schema:
        type: integer
        example: 25
    x-total:
      description: Total number of records if all came in a single page.
      schema:
        type: integer
        example: 700
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
